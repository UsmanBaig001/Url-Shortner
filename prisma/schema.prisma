datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  sessions      Session[]
  resetToken    String?
  resetTokenExpiry DateTime?
  role          UserRole?       @default(USER)
  urls          Url[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
  @@unique([identifier, token])
}

model Url {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  originalUrl String
  shortCode   String    @unique
  userId      String?   @db.ObjectId
  user        User?     @relation(fields: [userId], references: [id])
  visits      UrlVisit[]
  isActive    Boolean   @default(true)
  qrCode      String?
  createdAt   DateTime  @default(now())
}

model TrialUrl {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  originalUrl String
  shortCode   String    @unique
  sessionId   String
  visits      TrialUrlVisit[]
  isActive    Boolean   @default(true)
  qrCode      String?
  createdAt   DateTime  @default(now())
}

model UrlVisit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  urlId     String   @db.ObjectId
  url       Url      @relation(fields: [urlId], references: [id])
  visitedAt DateTime @default(now())
}

model TrialUrlVisit {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  trialUrlId String    @db.ObjectId
  trialUrl   TrialUrl  @relation(fields: [trialUrlId], references: [id])
  visitedAt  DateTime  @default(now())
}